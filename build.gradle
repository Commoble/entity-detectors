plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.moddev' version '1.0.+'
	id 'org.sinytra.wiki.toolkit' version '0.1.10'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}


group = "net.commoble.${modid}"
archivesBaseName = "${modid}-${mc_version}"
version = "${mod_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

sourceSets
{
	main
	gametest
	datagen
}

// include resources generated from datagen in main
sourceSets.main.resources { srcDir 'src/generated/resources' }

neoForge {
	version = "${neo_version}"
	mods {
		"${modid}" {
			sourceSet(sourceSets.main)
		}
	}
	runs {
		client {
			client()
		}
		server {
			server()
		}
		gameTestServer {
			type = "gameTestServer"
		}
		data {
			data()
			programArguments.addAll '--mod', "entitydetectors", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
		}
		configureEach {
			
		}
	}
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
	manifest {
		attributes([
				"Specification-Title"	 : "${modid}",
				"Specification-Vendor"	: "Commoble",
				"Specification-Version"   : "1", // We are version 1 of ourselves
				"Implementation-Title"	: project.name,
				"Implementation-Version"  : "${version}",
				"Implementation-Vendor"   : "Commoble",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


wiki {
	docs {
		entitydetectors {
			root = file('docs')
			exportedAssetNamespaces = ['entitydetectors']
		}
	}
}
